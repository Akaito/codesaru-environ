# TODO
# 
# Read "A Super-Simple Makefile for Medium-Sized C/C++ Projects"
# https://spin.atomicobject.com/2016/08/26/makefile-c-projects/
#
# Maybe also reference this:
# https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html
#

# Much of this Makefile was informed by:
# "A Super-Simple Makefile for Medium-Sized C/C++ Projects"
# https://spin.atomicobject.com/2016/08/26/makefile-c-projects/

WARNING_FLAGS += -Wall -Wextra -Wpedantic
CFLAGS += $(WARNING_FLAGS)
CXXFLAGS += -std=c++11 $(WARNING_FLAGS)
CC := clang
CXX := clang++

# =  -- Lazy set; recursively expanded when used, not when declared.
# := -- Immediate set; expand when declared.
# ?= -- Set variable only if absent.

# notdir gives the last not-directory part (which happens to be a directory
# here).
PROJNAME = $(notdir $(shell pwd))
PROJ_VERSION ?= 0.1
TARGET ?= lib$(PROJNAME).a

CSARU_PKG_DIR = ../../pkg
INSTALL_DIR := $(CSARU_PKG_DIR)/$(PROJNAME).$(PROJ_VERSION)

SRC_DIRS ?= ./src

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c)
OBJS := $(addsuffix .o,$(basename $(SRCS)))
DEPS := $(OBJS:.o=.d)

LDLIBS += $(addprefix -l ,$(CSARU_DEPENDS))
LDFLAGS += $(addprefix -L ../../pkg/,$(CSARU_DEPENDS))

# All directories in ./src, etc.
INC_DIRS := $(shell find $(SRC_DIRS) -type d) $(CSARU_PKG_DIR)
INC_FLAGS += $(addprefix -I,$(INC_DIRS))

# -MMD: -MD, without mentioning system header files.
# -MD: Write out Make-style dependencies for each file.
# -MP: Also write a phony rule for each header, so if a header is removed
#  without updating the file Make is using, it won't error.
CXXFLAGS += $(INC_FLAGS) -MMD -MP


.PHONY: clean install tags

build: $(TARGET)

$(TARGET): $(OBJS)
	@# r: Insert members with replacement.
	@# c: Don't warn if the archive didn't already exist.
	@# s: Add or update archive's index.
	$(AR) rcs $@ $^

# TODO : Something more proper than running fixlinks.sh like this?
install: $(TARGET)
	mkdir --parents $(INSTALL_DIR)
	cp $(TARGET) $(INSTALL_DIR)/
	-cp -r src/exported/* $(INSTALL_DIR)/
	../../fixlinks.sh

clean:
	$(RM) $(TARGET) $(OBJS) $(DEPS)

# TODO : Make ctags file only rebuild when srcs are newer.
tags:
	@# tag-relative: Make output relative to ctags file, not current directory
	@#               Because I run make from repo base dir, and vim from src dir.
	ctags --recurse --tag-relative -f ./src/tags


-include $(DEPS)

